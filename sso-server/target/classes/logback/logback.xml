<?xml version="1.0" encoding="UTF-8"?>
<!-- 
	1.  尝试在 classpath 下查找文件 logback-test.xml;
    2.  如果文件不存在，则查找文件 logback.xml;
    3.  如果两个文件都不存在,logback 用 Bas icConfigurator 自动对自己进行配置,这会 导致记录输出到控制台。
 -->

<!-- 
	scan 自动重新加载  配置文件发生变化后进行重新配置 
	scanPeriod 属性控制扫描周期,其值可以带时间单位，包括：milliseconds、seconds、minutes 和 hours.没写明时间单位,则默认为毫秒
	                           默认情况下,每隔一分钟扫描一次
-->
<configuration scan="true" scanPeriod="30 minutes"> 
	<!-- 
		引用 class path 上的资源文件,引用变量,用法同spring资源文件的加载
		<property resource="resource1.properties" />
		直接指定变量
		<property name="LOG_HOME" value="" />
    -->
	<property resource="logback/logback.properties" />
	
	<!--  
		设置上下文名称后,可以方便地区分来自不同应用程序的记录
	-->
	<contextName>${logback.appName}</contextName> 
	
	<!-- name 属性指定 appender 的名称,class 属性指定 appender 类的全限定名 -->
	<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender"> 
		<!-- 
			<encoder>元素class 属性是必要的,表示将被实例化的 encoder 类的全限定名.因为太常用了,所以当 encoder 是 PatternLayoutEncoder 时,可以省略 class 属性
		 -->
		<encoder> 
			<!--  
				%date{yyyy-MM-dd HH:mm:ss} 时间
				[%thread] 线程名称
				%-5level 级别
				%logger 类名
				%msg%n信息
			-->
  			<pattern>%date{yyyy-MM-dd HH:mm:ss}[${logback.appName}:%thread] %-5level %logger [%file:%line]:%msg%n</pattern> 
		</encoder> 
	</appender>

    <!-- logback日志输出到kafka扩展 
    <appender name="mongo_kafka" class="KafkaLogbackAppender">
        <brokerList>${kafka.broker.list}</brokerList>
        <topic>${kafka.topic}</topic>
        <retries>${kafka.retries}</retries>
        <formatters>${kafka.log.formatters}</formatters>
        <level>INFO</level>
    </appender>
    -->
    
    <appender name="java_all"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${logback.home}/${logback.all}/${logback.allFileName}.log</file>
		<!-- TimeBasedRollingPolicy 有两个属性:必需的fileNamePattern和可选的maxHistory fileNamePattern 
			必需.定义滚动（归档）记录文件的名字。其值应当包含文件名及'%d'格式转换符。'%d'可以包含一个java.text.SimpleDateFormat 
			指定的日期时间模式. 如果没有指定日期时间模式,则默认为 yyyy-MM-dd.RollingFileAppender（TimeBasedRollingPolicy 
			之父）的file选项可有可无. maxHistory 控制被保留的归档文件的最大数量，超出数量就删除旧文件.例如,假设每月滚动且 maxHistory 
			是 6，则只保留最近 6 个月的归档文件,删除之前的文件.注意当 删除旧归档文件时,那些为了归档而创建的目录也会被删除。 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${logback.home}/${logback.all}/${logback.allFileName}-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!--  <maxHistory>30</maxHistory> -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 100MB -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss}[${logback.appName}:%thread]%-5level %logger [%file:%line]:%msg%n</pattern>
		</encoder>
	</appender>
	
	<appender name="java_err"
		class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${logback.home}/${logback.err}/${logback.errFileName}.log</file>
		<filter class="ch.qos.logback.classic.filter.LevelFilter">
			<level>ERROR</level>
			<onMatch>ACCEPT</onMatch>
			<onMismatch>DENY</onMismatch>
		</filter>
		<!-- TimeBasedRollingPolicy 有两个属性:必需的fileNamePattern和可选的maxHistory fileNamePattern 
			必需.定义滚动（归档）记录文件的名字。其值应当包含文件名及'%d'格式转换符。'%d'可以包含一个java.text.SimpleDateFormat 
			指定的日期时间模式. 如果没有指定日期时间模式,则默认为 yyyy-MM-dd.RollingFileAppender（TimeBasedRollingPolicy 
			之父）的file选项可有可无. maxHistory 控制被保留的归档文件的最大数量，超出数量就删除旧文件.例如,假设每月滚动且 maxHistory 
			是 6，则只保留最近 6 个月的归档文件,删除之前的文件.注意当 删除旧归档文件时,那些为了归档而创建的目录也会被删除。 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<fileNamePattern>${logback.home}/${logback.err}/${logback.errFileName}-%d{yyyy-MM-dd}.%i.log
			</fileNamePattern>
			<!-- <maxHistory>30</maxHistory> -->
			<timeBasedFileNamingAndTriggeringPolicy
				class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<!-- or whenever the file size reaches 100MB -->
				<maxFileSize>10MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
		</rollingPolicy>
		<encoder>
			<pattern>%date{yyyy-MM-dd HH:mm:ss}[${logback.appName}:%thread]%-5level %logger [%file:%line]:%msg%n</pattern>
		</encoder>
	</appender>
	
   <appender name="java_trade"
        class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${logback.home}/${logback.trade}/${logback.tradeFileName}.log</file>
        <!-- TimeBasedRollingPolicy 有两个属性:必需的fileNamePattern和可选的maxHistory fileNamePattern 
            必需.定义滚动（归档）记录文件的名字。其值应当包含文件名及'%d'格式转换符。'%d'可以包含一个java.text.SimpleDateFormat 
            指定的日期时间模式. 如果没有指定日期时间模式,则默认为 yyyy-MM-dd.RollingFileAppender（TimeBasedRollingPolicy 
            之父）的file选项可有可无. maxHistory 控制被保留的归档文件的最大数量，超出数量就删除旧文件.例如,假设每月滚动且 maxHistory 
            是 6，则只保留最近 6 个月的归档文件,删除之前的文件.注意当 删除旧归档文件时,那些为了归档而创建的目录也会被删除。 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${logback.home}/${logback.trade}/${logback.tradeFileName}-%d{yyyy-MM-dd}.%i.log
            </fileNamePattern>
            <maxHistory>30</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy
                class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- or whenever the file size reaches 100MB -->
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder>
            <pattern>%date{yyyy-MM-dd HH:mm:ss}[${logback.appName}:%thread]%-5level %logger [%file:%line]:%msg%n</pattern>
        </encoder>
    </appender>
  
  <root level="INFO"> 
  	<appender-ref ref="CONSOLE" /> 
  	<appender-ref ref="mongo_all" />
  	<appender-ref ref="mongo_err" />
  	<!--  
  	<appender-ref ref="mongo_kafka" />
  	-->
  </root>
  
  <!-- spring -->
  <logger name="org.springframework.web" level="INFO" />

  <!--
  <logger name="org.springframework" level="DEBUG" /> 
  <logger name="org.springframework" level="INFO" />
  -->

  <logger name="com.alibaba.dubbo" level="DEBUG" />
  <logger name="org.mybatis.spring" level="DEBUG" />

  <!-- 
  <logger name="org.mybatis" level="ERROR" />
  -->
  <logger name="org.mybatis" level="DEBUG" />
 
  <logger name="com.java" level="DEBUG" ></logger>
  
  <!-- Ucaner -->
  <logger name="cn.ucaner" level="INFO" ></logger>
</configuration>
