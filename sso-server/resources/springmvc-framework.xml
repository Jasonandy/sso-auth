<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd 
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd 
	http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-4.1.xsd 
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
	http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd"
	default-lazy-init="true">

	<!-- 自动扫描且只扫描@Controller -->
    <context:component-scan base-package="cn.ucaner" use-default-filters="false">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller" />
    </context:component-scan>
    	
	<mvc:annotation-driven content-negotiation-manager="contentNegotiationManager">
		<mvc:message-converters register-defaults="true">
			<!-- 将StringHttpMessageConverter的默认编码设为UTF-8 -->
			<bean class="org.springframework.http.converter.StringHttpMessageConverter">
				<constructor-arg value="UTF-8" />
			</bean>
			<!-- 将Jackson2HttpMessageConverter的默认格式化输出设为true -->
			<bean class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="prettyPrint" value="true" />
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>
	
	<!-- REST中根据URL后缀自动判定Content-Type及相应的View -->
	<bean id="contentNegotiationManager" class="org.springframework.web.accept.ContentNegotiationManagerFactoryBean">
		<property name="mediaTypes">
			<value>
				json=application/json
				xml=application/xml
			</value>
		</property>
	</bean>
	
	<bean id="freemarkerConfig" class="org.springframework.web.servlet.view.freemarker.FreeMarkerConfigurer">
		<!-- 指定单个模板路径 
		<property name="templateLoaderPath" value="/WEB-INF/views/"/>
		-->
		<!-- 指定多个模板路径 -->
		<property name="templateLoaderPaths" value="/WEB-INF/views/"></property>
		<property name="freemarkerSettings">
			<props>
				<!--FreeMarker默认每隔5秒检查模板是否被更新，如果已经更新了，就会重新加载并分析模板。 但经常检查模板是否更新可能比较耗时。
					如果你的应用运行在生产模式下，而且你预期模板不会经常更新，则可以将更新的延迟时间延长至一个小时或者更久。-->
				<prop key="template_update_delay">0</prop>
				<prop key="default_encoding">UTF-8</prop>
				<prop key="output_encoding">UTF-8</prop>
				<prop key="locale">zh_CN</prop>
				<prop key="number_format">#.##</prop>
				<prop key="datetime_format">yyyy-MM-dd HH:mm:ss</prop>
				<prop key="date_format">yyyy-MM-dd</prop>
				<prop key="time_format">HH:mm:ss</prop>
				<!-- 默认当变量为null时替换为空字符串  -->
				<prop key="classic_compatible">true</prop>
				<prop key="template_exception_handler">ignore</prop>
			</props>
		</property>
	</bean>

	<!-- freemarker视图解析器 -->
	<bean id="freemarkerViewResolver" class="org.springframework.web.servlet.view.freemarker.FreeMarkerViewResolver">
		<!-- cn.ucaner.common.freemark.CustomerFreeMark  org.springframework.web.servlet.view.freemarker.FreeMarkerView -->
		<!-- 自定义视图 -->
        <property name="viewClass" value="cn.ucaner.common.framework.freemark.CustomerFreeMark"/>
		<property name="cache" value="true"/>
		<property name="prefix" value="/"/>
		<property name="suffix" value=".ftl"/>
		<property name="contentType" value="text/html;charset=UTF-8"/>
		<property name="requestContextAttribute" value="request"/>
		<!-- 将请求和会话属性作为变量暴露给FreeMarker模板使用。可以设置exposeRequestAttributes或者exposeSessionAttributes为true -->
		<property name="exposeRequestAttributes" value="true"/>
		<property name="exposeSessionAttributes" value="true"/>
		<!-- 使用这些宏，必须设置FreeMarkerViewResolver的exposeMacroHelpers属性为true -->
		<property name="exposeSpringMacroHelpers" value="true"/>
		<!-- order表示解析器的优先级别   这里是多解析器的关键 会从低到高寻找模板，如果都没有则404-->
		<property name="order" value="0"/>
	</bean>

	<!-- 通用JSP视图解析器 -->
	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"/>
	</bean>
	
	<!-- 配置MultipartResolver 用于文件上传 使用spring的CommosMultipartResolver -->  
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    	<property name="defaultEncoding" value="utf-8"></property>   
        <property name="maxUploadSize" value="104857600"></property> 
        <property name="maxInMemorySize" value="1048576"></property>
    </bean>


	
	<!-- 容器默认的DefaultServletHandler处理 所有静态内容与无RequestMapping处理的URL -->
	<mvc:default-servlet-handler/>

    
	<!-- 定义无需Controller的url<->view直接映射 -->
	<mvc:view-controller path="/login" view-name="redirect:/login"/>

	<!-- test 页面映射 -->
	<mvc:resources mapping="/test/**" location="/WEB-INF/views/test/"/>
	
	<!-- <mvc:interceptors>
	<mvc:interceptor>
		<mvc:exclude-mapping path="/test/js/**"/>
	          <mvc:exclude-mapping path="/test/css/**"/>
	          <mvc:exclude-mapping path="/test/images/**"/>
		<bean class="cn.ucaner.common.interceptor.LoginInterceptor" />
	</mvc:interceptor>
	</mvc:interceptors> -->

</beans>